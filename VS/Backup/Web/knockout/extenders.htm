<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
      <script src="../jquery/jquery-1.8.3.min.js" type="text/javascript"></script>
    <script src="knockout-2.3.0.js" type="text/javascript"></script>
</head>
<body>
<p><input data-bind="value: myNumberOne" /> (round to whole number)</p>
    <p><input data-bind="value: myNumberTwo" /> (round to two decimals)</p>
    
    
    <p data-bind="css: { error: firstName.hasError }">
    <input data-bind='value: firstName, valueUpdate: "afterkeydown"' />
    <span data-bind='visible: firstName.hasError, text: firstName.validationMessage'> </span>
</p>
<p data-bind="css: { error: lastName.hasError }">
    <input data-bind='value: lastName, valueUpdate: "afterkeydown"' />
    <span data-bind='visible: lastName.hasError, text: lastName.validationMessage'> </span>
</p>
    

    <script type="text/javascript">
        ko.extenders.numeric = function (target, precision) {
            //create a writeable computed observable to intercept writes to our observable
            var result = ko.computed({
                read: target, //always return the original observables value
                write: function (newValue) {
                    var current = target(),roundingMultiplier = Math.pow(10, precision),newValueAsNum = isNaN(newValue) ? 0 : parseFloat(+newValue),valueToWrite = Math.round(newValueAsNum * roundingMultiplier) / roundingMultiplier;
                    //only write if it changed
                    if (valueToWrite !== current) {
                        target(valueToWrite);
                    } else {
                        //if the rounded value is the same, but a different value was written, force a notification for the current field
                        if (newValue !== current) {
                            target.notifySubscribers(valueToWrite);
                        }
                    }
                }
            });
            //initialize with current value to make sure it is rounded appropriately
            result(target());
            //return the new computed observable
            return result;
        };
       

        ko.extenders.required = function (target, overrideMessage) {
            //add some sub-observables to our observable
            target.hasError = ko.observable();
            target.validationMessage = ko.observable();
            //define a function to do validation
            function validate(newValue) {
                target.hasError(newValue ? false : true);
                target.validationMessage(newValue ? "" : overrideMessage || "This field is required");
            }
            //initial validation
            validate(target());
            //validate whenever the value changes
            target.subscribe(validate);
            //return the original observable
            return target;
        }; 

        function AppViewModel(first, last, one, two) {
            this.firstName = ko.observable(first).extend({ required: "Please enter a first name" });
            this.lastName = ko.observable(last).extend({ required: "" });
            this.myNumberOne = ko.observable(one).extend({ numeric: 0 });
            this.myNumberTwo = ko.observable(two).extend({ numeric: 2 });
        }
        ko.applyBindings(new AppViewModel("Bob", "Smith", 221.2234, 123.4525));  

      //  ko.applyBindings(new AppViewModel());
    </script>
</body>
</html>
